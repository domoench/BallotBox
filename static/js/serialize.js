// Generated by CoffeeScript 1.6.2
/*
  A generic module to handle conversion of a HTML form element to a JSON object
*/


(function() {
  define('serialize', ['jquery', 'underscore'], function($, _) {
    var serialize;

    return serialize = {
      elements_of_interest: ['input', 'select', 'textarea'],
      getFormData: function(form_selector) {
        /*
          Serialize the input from an HTML form into a javascript object. Inputs
          with the class 'choice' are packaged together as a list and assigned
          to the 'choices' property of the result object. All other properties
          derive their keys and values directly from the form elements' name and
          value.
        
          @param {String} form_selector The jQuery selector string for the form
                                        fieldset to be serialized.
          @return {Object} result_obj A serialized object representation of the
                                      form data
        */

        var choices, choices_obj, elements, inputs, other_inputs, other_pair_list, other_pair_obj, part_list, part_obj, part_string, participants, result_obj,
          _this = this;

        elements = $(form_selector).children();
        inputs = _.filter(elements, function(element) {
          return _.contains(_this.elements_of_interest, $(element).prop('localName'));
        });
        console.log('inputs:', inputs);
        choices = _.filter(inputs, function(input) {
          return ($(input).prop('className')) === 'choice';
        });
        participants = _.filter(inputs, function(input) {
          return ($(input).prop('localName')) === 'textarea';
        });
        other_inputs = _.difference(inputs, choices, participants);
        other_pair_list = _.map(other_inputs, function(elem) {
          var $elem;

          $elem = $(elem);
          return [_this.getInputKey($elem), _this.getInputValue($elem)];
        });
        other_pair_obj = _.object(other_pair_list);
        choices_obj = {
          choices: _.map(choices, function(elem) {
            return $(elem).val();
          })
        };
        part_string = $(participants[0]).val();
        part_list = part_string.split(/[\s\n,]+/);
        part_obj = {
          participants: part_list
        };
        return result_obj = _.extend(choices_obj, part_obj, other_pair_obj);
      },
      getInputKey: function($elem) {
        /*
          Return the name key of a jQuery input element.
        
          @param {jQuery} $elem
          @return {String}
        */
        return $elem.attr('name');
      },
      getInputValue: function($elem) {
        /*
          Return the value attribute of a jQuery input element.
        
          @param {jQuery} $elem
          @return {String}
        */
        return $elem.val();
      }
    };
  });

}).call(this);
