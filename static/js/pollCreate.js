// Generated by CoffeeScript 1.6.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('pollCreate', ['jquery', 'jquery.validate', 'underscore'], function($, jq_validate, _) {
    /*
      JQUERY SETUP
    */

    var getFormData;
    $('#add-button').click(function(event) {
      var index, last_choice, new_index;
      last_choice = $('fieldset .choice').last();
      index = last_choice.attr('index');
      new_index = (parseInt(index)) + 1;
      last_choice.after('<br><input name=\'choice[' + new_index + ']\' class=\'choice\' index=\'' + new_index + '\'>');
      console.log(last_choice);
      return null;
    });
    $.validator.addMethod('emailscsv', (function(value, element) {
      var part_list;
      part_list = value.split(/[\s\n,]+/);
      return _.every(part_list, function(list_el) {
        return /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(list_el);
      });
    }), 'Please enter a comma seperated list of valid email addresses');
    $('form').validate({
      rules: {
        name: {
          required: true
        },
        close: {
          required: true
        },
        initiator: {
          required: true,
          email: true
        },
        participants: {
          required: true,
          emailscsv: true
        }
      },
      messages: {
        name: {
          required: 'Please give your poll a name'
        },
        close: {
          required: 'Please provide an expiration date for this poll'
        },
        initiator: {
          required: 'Your email is required',
          email: 'Please provide a valid email address'
        },
        participants: {
          required: 'Your must have at least one particpant'
        }
      },
      invalidHandler: function(e, validator) {
        var errors, message;
        errors = validator.numberOfInvalids();
        if (errors) {
          message = errors === 1 ? 'You missed a required field' : "You missed " + errors + " fields";
          $('div.error span').html(message);
          return $('div.error').show();
        } else {
          return $('div.error').hide();
        }
      },
      submitHandler: function(form, event) {
        var ajax_settings, form_obj, promise;
        event.preventDefault();
        console.log('submitHandler() called!', arguments);
        form_obj = getFormData($(form).find('fieldset'));
        console.log('form_obj', form_obj);
        ajax_settings = {
          type: 'PUT',
          url: '/',
          contentType: 'application/json',
          data: JSON.stringify(form_obj),
          processData: false
        };
        promise = $.ajax(ajax_settings);
        promise.done(function(data) {
          return $('#content').html('<p>Poll Created</p>');
        });
        return promise.fail(function(jqXHR, textStatus, errorThrown) {
          throw new Error(errorThrown);
        });
      }
    });
    /*
      HELPER FUNCTIONS
    */

    getFormData = function(form_selector) {
      /*
        Serialize the input from an HTML form into a javascript object. Inputs
        with the class 'choice' are packaged together as a list and assigned
        to the 'choices' property of the result object. All other properties
        derive their keys and values directly from the form elements' name and
        value.
      
        @param {String} form_selector The jQuery selector string for the form
                                      fieldset to be serialized.
        @return {Object} result_obj A serialized object representation of the
                                    form data
      */

      var choices, choices_obj, elements, elements_of_interest, inputs, other_inputs, other_pair_list, other_pair_obj, part_list, part_obj, part_string, participants, result_obj,
        _this = this;
      elements_of_interest = ['input', 'select', 'textarea'];
      elements = $(form_selector).children();
      inputs = _.filter(elements, function(element) {
        return _.contains(elements_of_interest, $(element).prop('localName'));
      });
      choices = _.filter(inputs, function(input) {
        var class_list, classes;
        classes = $(input).prop('className');
        class_list = classes.split(/\s/);
        return __indexOf.call(class_list, 'choice') >= 0;
      });
      participants = _.filter(inputs, function(input) {
        return ($(input).prop('localName')) === 'textarea';
      });
      other_inputs = _.difference(inputs, choices, participants);
      other_pair_list = _.map(other_inputs, function(elem) {
        var $elem;
        $elem = $(elem);
        return [$elem.attr('name'), $elem.val()];
      });
      other_pair_obj = _.object(other_pair_list);
      choices_obj = {
        choices: _.map(choices, function(elem) {
          return $(elem).val();
        })
      };
      part_string = $(participants[0]).val();
      part_list = part_string.split(/[\s\n,]+/);
      part_obj = {
        participants: part_list
      };
      return result_obj = _.extend(choices_obj, part_obj, other_pair_obj);
    };
    return null;
  });

}).call(this);
