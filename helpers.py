"""
    BallotBox Helper Functions.

    TODO: Seperate these out into sensible modules
"""

import hashlib
from base64 import urlsafe_b64encode

def generateKeyString(seed, time_now, prefix):
    """
    Generates a unique key that will be used in Redis to identify poll,
    initiator, and participant records.

    Args:
        seed: A hash seed string
        time_now: A time string generated by datetime.datetime.utcnow().isoformat()
        prefix: A string to identify the key as IDing a poll, initiator, or
            participant record.
    """
    if prefix not in ['poll_', 'init_', 'part_']:
        raise Exception('Invalid key prefix: ' + prefix)
    hash_token = hashlib.sha1(seed + time_now).hexdigest()
    hash_int = int(hash_token, 16) % (10 ** 12)
    hash_hex = hex(hash_int)
    return prefix + urlsafe_b64encode(hash_hex).rstrip('=')

def calcStats(vote_list, num_choices):
    """
    Calculate the percentage breakdown between the choices in the given choices
    list

    Args:
        vote_list: A list where each element is one participant's integer choice.
            For example: [0, 3, 2, 1, 1, 0, 1, 0, 1, 3]. Note, an ongoing poll may
            have elements that are None for participants who didn't vote.
        num_choices: The number of choices in the vote. Does not include 'None'.

    Returns:
        A dictionary mapping each choice to its percentage of the total vote. For
        example: {0: 30, 1: 40, 2: 10, 3: 20, 'None': 0}
    """
    num_votes = len(vote_list)
    stats = {'None': 0}
    for i in range(0, num_choices):
        stats[i] = 0
    # Tally up votes
    for choice in vote_list:
        if choice == None:
            stats['None'] += 1
        else:
            stats[choice] += 1
    # Convert to percentage
    for key in stats:
        stats[key] = (stats[key] / float(num_votes)) * 100
    return stats
